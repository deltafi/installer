#!/usr/bin/env bash

. "$DELTAFICLI_WORKDIR/common"

cli_help_command() {
  echo "
Command: timed-ingress

Subcommands:
  start
  stop
  validate
  show
Expert-only Subcommands:
  clear-memo
  set-memo
Usage:
  timed-ingress [SUBCOMMAND] FLOW_NAME [MEMO]
  Only set-memo uses MEMO argument"
  exit 1
}

TMPFILE="/tmp/.deltafi-timed-ingress.$$"

cleanup() {
  rm -f $TMPFILE
  exit
}

log_failed() {
  cli_log "${red}${BASENAME}: Failed to ${SUBCOMMAND} flow ${cyan}${FLOW_NAME}${normal}"
  echo -e "${red}Error: ${1}${normal}"
}

trap cleanup INT

POSITIONAL=()
while [[ $# -gt 0 ]]; do
  key="$1"

  case $key in
    -h|--help)
      cli_help_command
      shift # past argument
      ;;
    *)    # unknown option
      POSITIONAL+=("$1") # save it in an array for later
      shift # past argument
      ;;
  esac
done

set -- "${POSITIONAL[@]}" # restore positional parameters
ARGS=($@)
[[ " ${ARGS[@]} " =~ " --help " ]] && cli_help_command
[[ ${#ARGS[@]} -lt 3 ]] && cli_help_command
SUBCOMMAND=${ARGS[1]}
FLOW_NAME=${ARGS[2]}
MEMO=${ARGS[3]}

VARIABLES="{\"flowName\": \"$FLOW_NAME\", \"memo\": \"$MEMO\" }"
case "$SUBCOMMAND" in
  clear-memo)
    echo -e "${yellow}Warning: ${SUBCOMMAND} for experts only${normal}"
    _are_you_sure
    EXTRACT_PATH=".data.setTimedIngressMemo"
    QUERY="mutation(\$flowName: String!) { setTimedIngressMemo(flowName: \$flowName) }"
    ;;
  set-memo)
    [[ -z "$MEMO" ]] && _exit_1 echo "Please specify a value for MEMO"
    echo -e "${yellow}Warning: ${SUBCOMMAND} for experts only${normal}"
    _are_you_sure
    EXTRACT_PATH=".data.setTimedIngressMemo"
    QUERY="mutation(\$flowName: String!, \$memo: String) { setTimedIngressMemo(flowName: \$flowName, memo: \$memo) }"
    ;;
  start)
    EXTRACT_PATH=".data.startTimedIngressFlow"
    QUERY="mutation(\$flowName: String!) { startTimedIngressFlow(flowName: \$flowName) }"
    ;;
  stop)
    EXTRACT_PATH=".data.stopTimedIngressFlow"
    QUERY="mutation(\$flowName: String!) { stopTimedIngressFlow(flowName: \$flowName) }"
    ;;
  validate)
    EXTRACT_PATH=".data.validateTimedIngressFlow"
    QUERY="query(\$flowName: String!) {validateTimedIngressFlow(flowName: \$flowName) { flowStatus { state errors { configName errorType message } } } }"
    ;;
  show)
    EXTRACT_PATH=".data.getTimedIngressFlow"
    QUERY="query(\$flowName: String!) {
             getTimedIngressFlow(flowName: \$flowName) {
               name
               description
               sourcePlugin {
                 artifactId
                 groupId
                 version
               }
               flowStatus {
                 state
                 errors {
                   errorType
                   configName
                   message
                 }
               }
               targetFlow
               cronSchedule
               ingressStatus
               ingressStatusMessage
               timedIngressAction {
                   name
                   actionType
                   apiVersion
                   parameters
               }
               variables {
                 name
                 value
                 description
                 defaultValue
                 dataType
               }
             }
           }"
    ;;
  *)
    cli_help_command
    ;;
esac

DELTAFI_DGS=$(deltafi serviceip deltafi-core-service)
QUERY=$(echo $QUERY | sed 's/"/\\"/g')
POST_QUERY="{ \"query\": \"$QUERY\",\"variables\":$VARIABLES}"

truncate -s 0 ${TMPFILE}
RESPONSE_CODE=$(curl -s -X POST -o ${TMPFILE} -w "%{http_code}" -H "Content-Type: application/json" -H "$PERMISSION" -H "$CLI_USER" -d "$POST_QUERY" http://$DELTAFI_DGS/graphql)

if [[ "$RESPONSE_CODE" != "200" ]]; then
  ERRORS=$(cat ${TMPFILE})
  log_failed "$ERRORS"
else
  DGS_ERRORS=$(cat ${TMPFILE} | jq -r "select(.errors) | .errors[] | .message")
  if [[ "$DGS_ERRORS" != "" ]]; then
    log_failed "$DGS_ERRORS"
  elif  [[ "$SUBCOMMAND" == "validate" || "$SUBCOMMAND" == "show" ]]; then
    cat ${TMPFILE} | jq -r "${EXTRACT_PATH}"
  else
    STARTED=$(cat ${TMPFILE} | jq -r "${EXTRACT_PATH}")
    if [[ $STARTED == "true" ]]; then
      cli_log "Successfully executed ${SUBCOMMAND} for flow ${cyan}${FLOW_NAME}${normal}"
    else
      cli_log "${yellow}Flow ${FLOW_NAME} did not ${SUBCOMMAND}.${normal}"
    fi
  fi
fi

cleanup
