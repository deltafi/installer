#!/usr/bin/env bash

. "$DELTAFICLI_WORKDIR/common"

cli_help_command() {
  echo "
Command: uninstall-plugin

Usage:
  uninstall-plugin [GROUP_ID:ARTIFACT_ID:VERSION] [OPTIONS]

Options:
  -h, --help        Show help"
  exit 1
}

POSITIONAL=()
while [[ $# -gt 0 ]]; do
  key="$1"
  case $key in
    *)
      POSITIONAL+=("$1")
      shift
      ;;
  esac
done
set -- "${POSITIONAL[@]}"
ARGS=($@)
[[ " ${ARGS[@]} " =~ " --help " ]] && cli_help_command
[[ ${#ARGS[@]} -lt 2 ]] && cli_help_command

TMPFILE="/tmp/.deltafi-uninstall-plugin.$$"

cleanup() {
  rm -f $TMPFILE
  exit
}

log_failed() {
  cli_log "${red}${2}: Plugin cannot be removed${normal}"
  echo -e "${red}Error: ${1}${normal}"
  rm -f $TMPFILE
  exit 1
}

GROUP_ID=$(echo "$2" | cut -d ":" -f 1)
ARTIFACT_ID=$(echo "$2" | cut -d ":" -f 2)
VERSION=$(echo "$2" | cut -d ":" -f 3)

if [[ -z "$GROUP_ID" || -z "$ARTIFACT_ID" || -z "$VERSION" ]]; then
  cli_log "${red}Invalid plugin coordinates: $2${normal}"
  exit 1
fi

DELTAFI_DGS=$(deltafi serviceip deltafi-core-service)

QUERY="mutation {
         uninstallPlugin(pluginCoordinates: {groupId: \"$GROUP_ID\", artifactId: \"$ARTIFACT_ID\", version: \"$VERSION\"}) {
           success
           info
           errors
         }
       }"

QUERY=$(echo $QUERY | sed 's/"/\\"/g')
POST_QUERY="{ \"query\": \"$QUERY\",\"variables\":{}}"

truncate -s 0 ${TMPFILE}
RESPONSE_CODE=$(curl -s -X POST -o ${TMPFILE} -w "%{http_code}" -H "Content-Type: application/json" -H "$PERMISSION" -H "$CLI_USER" -d "$POST_QUERY" http://$DELTAFI_DGS/graphql)

if [[ "$RESPONSE_CODE" != "200" ]]; then
  ERRORS=$(cat ${TMPFILE})
  log_failed "$ERRORS"
else
  DGS_ERRORS=$(cat ${TMPFILE} | jq -r "select(.errors) | .errors[] | .message")
  if [[ "$DGS_ERRORS" != "" ]]; then
    log_failed "$DGS_ERRORS"
  else
    SUCCESS=$(cat ${TMPFILE} | jq -r '.data.uninstallPlugin.success')
    if [[ $SUCCESS == "true" ]]; then
      cli_log "Plugin $2 was successfully uninstalled"
    else
      ERRORS=$(cat ${TMPFILE} | jq -r '.data.uninstallPlugin.errors | join(",")')
      log_failed "$ERRORS"
    fi
  fi
fi

cleanup
