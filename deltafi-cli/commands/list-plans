#!/usr/bin/env bash

. "$DELTAFICLI_WORKDIR/common"

cli_help_command() {
  echo "
Command: list-plans

Usage:
  list-plans [OPTIONS]

Options:
  -h, --help     Show help"
  exit 1
}

ARGS=($@)
[[ " ${ARGS[@]} " =~ " --help " || " ${ARGS[@]} " =~ " -h " ]] && cli_help_command

FIELDS="{ name description sourcePlugin {groupId artifactId version}}"
QUERY="query { getAllFlowPlans { transformPlans $FIELDS normalizePlans $FIELDS enrichPlans $FIELDS egressPlans $FIELDS}}"
RESULT=$(deltafi query "$QUERY")

print_plans() {
  FLOW_TYPE=$(tr '[:lower:]' '[:upper:]' <<< ${1:0:1})${1:1}
  echo "$RESULT" | jq -r "([\"${FLOW_TYPE} Flow Plan\", \"Source Plugin\", \"Description\"] | (., map(length*\"=\"))), (.data.getAllFlowPlans.$1Plans[] | [.name, (.sourcePlugin.groupId + \":\" + .sourcePlugin.artifactId + \":\" + .sourcePlugin.version), .description]) | @tsv" | column -ts $'\t'
}

DGS_ERRORS=$(echo $RESULT | jq -r "select(.errors) | .errors[] | .message")
if [[ "$DGS_ERRORS" != "" ]]; then
  cli_log "${red}${BASENAME}: Failed to get the list of flow plans${normal}"
  echo -e "${red}Error: ${DGS_ERRORS}${normal}"
else
  print_plans "transform"
  echo
  print_plans "normalize"
  echo
  print_plans "enrich"
  echo
  print_plans "egress"
fi