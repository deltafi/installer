#!/usr/bin/env bash

. "$DELTAFICLI_WORKDIR/common"

cli_help_command() {
  echo "
Command: system-snapshot

Subcommands:
  create [REASON]
  restore [SNAPSHOT_ID]
  import [EXPORTED_STATE_FILE]
  show [SNAPSHOT_ID]
  list

Usage:
  system-snapshot [SUBCOMMAND] [OPTIONS]

Options:
  -h, --help        Show help
  -R, --soft-reset  Preserve current settings that are not set in the snapshot"
  exit 1
}

TMPFILE="/tmp/.deltafi-system-snapshot.$$"

cleanup() {
  rm -f $TMPFILE
  exit
}

log_failed() {
  cli_log "${red}${BASENAME}: Failed to execute ${SUBCOMMAND}${normal}"
  echo -e "${red}Error: ${1}${normal}"
}

trap cleanup INT

HARD_RESET=true

POSITIONAL=()
while [[ $# -gt 0 ]]; do
  key="$1"

  case $key in
    -h|--help)
      cli_help_command
      shift # past argument
      ;;
    -R|--soft-reset)
      HARD_RESET=false
      shift
      ;;
    *)    # unknown option
      POSITIONAL+=("$1") # save it in an array for later
      shift # past argument
      ;;
  esac
done

set -- "${POSITIONAL[@]}" # restore positional parameters
ARGS=($@)
[[ " ${ARGS[@]} " =~ " --help " ]] && cli_help_command

SUBCOMMAND=${ARGS[1]}
ID_OR_FILE=${ARGS[2]}

ALL_SNAPSHOT_FIELDS="id
            reason
            created
            deltaFiProperties {
              systemName
              requeueSeconds
              autoResumeCheckFrequency
              coreServiceThreads
              scheduledServiceThreads
              delete {
                ageOffDays
                frequency
                policyBatchSize
              }
              ingress {
                enabled
                diskSpaceRequirementInMb
              }
              metrics {
                enabled
              }
              plugins {
                imageRepositoryBase
                imagePullSecret
              }
              checks {
                actionQueueSizeThreshold
                contentStoragePercentThreshold
              }
              ui {
                useUTC
                deltaFileLinks {
                  name
                  url
                  description
                }
                externalLinks {
                  name
                  url
                  description
                }
                topBar {
                  textColor
                  backgroundColor
                }
                securityBanner {
                  enabled
                  text
                  textColor
                  backgroundColor
                }
              }
              setProperties
            }
            deletePolicies {
              timedPolicies {
                id
                name
                enabled
                flow
                afterCreate
                afterComplete
                minBytes
                deleteMetadata
              }
              diskSpacePolicies {
                id
                name
                enabled
                flow
                maxPercent
              }
            }
            pluginImageRepositories {
              imageRepositoryBase
              pluginGroupIds
              imagePullSecret
            }
            installedPlugins {
              groupId
              artifactId
              version
            }
            pluginVariables {
              sourcePlugin {
                groupId
                artifactId
                version
              }
              variables {
                name
                description
                dataType
                required
                defaultValue
                value
              }
            }
            flowAssignmentRules {
              id
              name
              flow
              priority
              filenameRegex
              requiredMetadata {
                key
                value
              }
            }
            resumePolicies {
              id
              errorSubstring
              flow
              action
              actionType
              maxAttempts
              backOff {
                delay
                maxDelay
                multiplier
                random
              }
            }
            testTransformFlows
            testIngressFlows
            testEgressFlows
            runningTransformFlows
            runningIngressFlows
            runningEnrichFlows
            runningEgressFlows
            pluginCustomizationConfigs {
              groupId
              artifactId
              urlTemplate
              secretName
            }"

ALL_RESULT_FIELDS="success info errors"

VARIABLES="{}"
case "$SUBCOMMAND" in
  create)
    EXTRACT_PATH=".data.snapshotSystem"
    REASON=("${ARGS[@]:2}")
    REASON=${REASON[@]}
    if [ -z "$REASON" ]; then
      QUERY="mutation { snapshotSystem { $ALL_SNAPSHOT_FIELDS } }"
    else
      VARIABLES="{\"reason\": \"$REASON\"}"
      QUERY="mutation(\$reason: String) { snapshotSystem(reason: \$reason) { $ALL_SNAPSHOT_FIELDS } }"
    fi
    ;;
  restore)
    VARIABLES="{\"snapshotId\": \"$ID_OR_FILE\", \"hardReset\": $HARD_RESET}"
    EXTRACT_PATH=".data.resetFromSnapshotWithId"
    QUERY="mutation(\$snapshotId: String!, \$hardReset: Boolean) { resetFromSnapshotWithId(snapshotId: \$snapshotId, hardReset: \$hardReset) { $ALL_RESULT_FIELDS } }"
    ;;
  import)
    if [ ! -f "$ID_OR_FILE" ]; then
      cli_log "${red}$ID_OR_FILE: snapshot file was not found${normal}"
      exit 1
    fi

    JSON=$(cat "$ID_OR_FILE")
    VARIABLES="{\"snapshotData\": $JSON}"
    EXTRACT_PATH=".data.importSnapshot"
    QUERY="mutation(\$snapshotData: SystemSnapshotInput!) { importSnapshot(snapshot: \$snapshotData) { $ALL_SNAPSHOT_FIELDS } }"
    ;;
  list)
    EXTRACT_PATH=".data.getSystemSnapshots"
    QUERY="query { getSystemSnapshots { id created reason } } "
    ;;
  show)
    VARIABLES="{\"snapshotId\": \"$ID_OR_FILE\"}"
    EXTRACT_PATH=".data.getSystemSnapshot"
    QUERY="query(\$snapshotId: String!) { getSystemSnapshot(snapshotId: \$snapshotId) { $ALL_SNAPSHOT_FIELDS } }"
    ;;
  *)
    cli_help_command
    ;;
esac

DELTAFI_DGS=$(deltafi serviceip deltafi-core-service)

QUERY=$(echo $QUERY | sed 's/"/\\"/g')
POST_QUERY="{ \"query\": \"$QUERY\",\"variables\":$VARIABLES}"

truncate -s 0 ${TMPFILE}
RESPONSE_CODE=$(curl -s -X POST -o ${TMPFILE} -w "%{http_code}" -H "Content-Type: application/json" -H "$PERMISSION" -H "$CLI_USER" -d "$POST_QUERY" http://$DELTAFI_DGS/graphql)

if [[ "$RESPONSE_CODE" != "200" ]]; then
  ERRORS=$(cat ${TMPFILE})
  log_failed "$ERRORS"
else
  DGS_ERRORS=$(cat ${TMPFILE} | jq -r "select(.errors) | .errors[] | .message")
  if [[ "$DGS_ERRORS" != "" ]]; then
    log_failed "$DGS_ERRORS"
  else
    cat ${TMPFILE} | jq -r "${EXTRACT_PATH}"
  fi
fi

cleanup
