#!/usr/bin/env bash

. "$DELTAFICLI_WORKDIR/common"

cli_help_command() {
  echo "
Command: uninstall

Usage:
  uninstall"
  exit 1
}

ARGS=($@)
[[ " ${ARGS[@]} " =~ " --help " ]] && cli_help_command

_k8s_uninstall() {
  # remove the core first so that mongo collections are not recreated
  $KUBECTL_BIN delete deployments,pods -l group=deltafi-core --grace-period=0 --force 2>/dev/null || :

  _drop_mongo_collections

  # perform a helm uninstall
  helm uninstall $DELTAFICLI_PROJECT_NAME

  # sweep up whatever helm missed, but keep secrets
  $KUBECTL_BIN delete pods,daemonsets,services,statefulsets,replicasets,deployments -n deltafi --grace-period=0 --force --all 2>&1 | grep -v Warning
}

_compose_uninstall() {
  "${DELTAFICLI_COMPOSE_PATH}"/compose uninstall
}

_drop_mongo_collections() {
  # drop all collections in the deltafi database
  CMDS=$(deltafi mongo-eval "db.getCollectionNames()" 2>/dev/null | tail -n +8 | sed "s/'/\"/g" | jq '.[]' | sed 's/"/db./' | sed 's/"/.drop();/')

  if [ -n "$CMDS" ]; then
    for CMD in $CMDS
    do
      echo "  $CMD"
      deltafi mongo-eval "$CMD" >/dev/null 2>&1
    done
  fi
}

read -r -p "☢️  Uninstalling DeltafFi is a destructive operation that will remove configuration and anything in the database.
☠️  This could make your day go badly.
Are you really, really sure? [y/N] " response
case "$response" in
  [yY][eE][sS]|[yY])
    cli_log "Uninstalling DeltaFi"
    if _is_standalone; then
      _compose_uninstall
    else
      _k8s_uninstall
    fi
    ;;
  *)
    cli_log "Aborting uninstall"
    exit 0
    ;;
esac

cli_log "DeltaFi uninstall complete"
