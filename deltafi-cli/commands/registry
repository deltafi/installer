#!/usr/bin/env bash

. "$DELTAFICLI_WORKDIR/common"

API_HOST=$(deltafi serviceip deltafi-api-service)
TEMPFILE=

cli_help_command() {
  echo "
Command: registry

Subcommands:
  add
  list
  delete
Usage:
  event [SUBCOMMAND] [ARGS]"
  exit 1
}
cli_list_help_command() {
  echo "
Command: registry add

Usage:
  registry list <arguments>

  Tabular list of all images in the local registry

Arguments:
  -t                   terse output, suitable for piping to another command
  -h                   help
"
  exit 1
}

cli_delete_help_command() {
  echo "
Command: registry delete <image_name>

Usage:
  registry delete <[image 1] ... [image n]> | <tarball>

  Delete named images from the local registry.  Image name should be complete and
  qualified with a tag.

Arguments:
  -h                   help

Examples:

  deltafi registry delete deltafi/deltafi-xml:1.0.0

  deltafi registry delete deltafi/deltafi-xml:1.0.0 deltafi/deltafi-xml:latest

  deltafi registry list -t | xargs deltafi registry delete
"
  exit 1
}

cli_add_help_command() {
  echo "
Command: registry add

Usage:
  registry add <arguments> [image 1] ... [image n]

  Add one or more images to the local registry.  Images can be added from public docker repositories,
  a local docker client cache, or a docker archive file (tarball).  By default, listed images will be
  resolved to public repositories.

  Note: You may not use the image name option with multiple images, and you may not upload multiple
  docker archive files in the same command invocation.

Arguments:
  -n|--name <val>            Rename the image.  Defaults to the image name if not specified. Required arguments
                             for docker archive files.
  -d|--docker-client         Pull the image from the local docker client cache instead of a docker registry.
  -a|--docker-archive <file> Upload a docker archive file.  Requires -n option to be specified.
  -r|--replace               Replace all image tags with this one
  -h                         help

Examples:

  deltafi registry add somerepo.io/deltafi/deltafi-xml:1.0.0
  deltafi registry add deltafi/deltafi-xml:1.0.0 deltafi/deltafi-xml:latest
  deltafi registry add -d my/built/image:latest
  deltafi registry add -d my/built/image:latest -n awesome:1.0
  deltafi registry add -a /tmp/ball.tar -n ball:1.0
"
  exit 1
}

cleanup() {
  rm -f "$TEMPFILE"
  exit
}

prerequisites() {
  _require_command skopeo
  _require_command jq
  if ! _version_check "jq-1.6" "$(jq --version)"; then
    echo "This command requires at least jq version 1.6"
    exit 1
  fi
}

list() {
  prerequisites
  LIST_URL="http://${API_HOST}/api/v1/registry/list"
  if [[ -n "$TERSE" ]]; then
    curl --connect-timeout 3 -s -H "$PERMISSION" "${LIST_URL}" 2>/dev/null | \
    jq -r '(.result[] | .name as $name | .tags[] | $name + ":" + .)'
  else
    echo
    curl --connect-timeout 3 -s -H "$PERMISSION" "${LIST_URL}" 2>/dev/null | \
    jq -r '"IMAGE TAG", "----- ---", (.result[] | .name as $name | .tags[] | $name + " " + .)' | \
    column -t
    echo
  fi
}

delete() {
  prerequisites
  DELETE_URL="http://${API_HOST}/api/v1/registry/delete"

  local result
  local error
  local image_name
  while [[ -n "$1" ]]; do
    image_name=$1
    shift

    result=$(curl -X DELETE --connect-timeout 3 -s -H "$PERMISSION" "${DELETE_URL}/${image_name}" 2>/dev/null)
    error=$(echo "$result" | jq -r '.error')
    if [[ -n $error && $error != "null" ]]; then
      _fail "Image deletion failed: $error"
    else
      _ok "$(echo "$result" | jq -r '.result')"
    fi
  done
}

add() {
  prerequisites
  ADD_URL="http://${API_HOST}/api/v1/registry/add"
  [[ -n "$REPLACE" ]] && ADD_URL="http://${API_HOST}/api/v1/registry/replace"
  UPLOAD_URL="http://${API_HOST}/api/v1/registry/upload"
  local image_name
  local result
  local error

  while [[ -n "$1" ]]; do
    image_name=$1
    shift
    unset TEMPFILE

    if [[ -n "$DOCKER_CLIENT" ]]; then
      TEMPFILE=$(mktemp)
      docker save -o "$TEMPFILE" "$image_name"
      NAME=${NAME:-$image_name}
    fi

    if [[ -n "$DOCKER_ARCHIVE" ]]; then
      [[ -z "$NAME" ]] && _exit_1 echo "Please specify a name for the image with '-n' or '--name' option"
      TEMPFILE=$(mktemp)
      cp ${image_name} $TEMPFILE
    fi

    echo "Uploading image $image_name ${NAME:+as $NAME}"
    if [[ -z "$TEMPFILE" ]]; then
      result=$(curl -X POST --connect-timeout 3 -s -H "$PERMISSION" "${ADD_URL}/${image_name}" ${NAME:+-H} "${NAME:+name: ${NAME}}" 2>/dev/null)
    else
      result=$(
        curl -X POST --connect-timeout 3 -s \
          -H "$PERMISSION" "${UPLOAD_URL}" \
          --data-binary @"$TEMPFILE" \
          -H "name: ${NAME}" \
          -H "Content-Type: application/octet-stream" 2>/dev/null
      )
      rm -f "$TEMPFILE"
    fi

    error=$(echo "$result" | jq -r '.error')
    if [[ -n $error && $error != "null" ]]; then
      _fail "Unable to add image to registry: $error"
    else
      _ok "$(echo "$result" | jq -r '.result')"
    fi
  done
}

trap cleanup INT

unset BASIC_AUTH

ARGS=("$@")
[[ ${#ARGS[@]} -lt 2 ]] && cli_help_command
SUBCOMMAND=${ARGS[1]}
shift
shift
case "$SUBCOMMAND" in
  list)
    VALID_ARGS=$(getopt -o ht --long help,terse,api-host: -- "$@")
    if [[ $? -ne 0 ]]; then
      exit 1;
    fi
    eval set --"$VALID_ARGS"
    while true; do
      case "$1" in
        -h | --help)
          cli_list_help_command
          exit 1
          shift
          ;;
        --api-host)
          API_HOST="$2"
          shift 2
          ;;
        -t | --terse)
          TERSE=true
          shift
          ;;
        --) shift;
          break
          ;;
      esac
    done
    list "$@"
    ;;
  delete)
    VALID_ARGS=$(getopt -o h --long help,api-host: -- "$@")
    if [[ $? -ne 0 ]]; then
      exit 1;
    fi
    eval set --"$VALID_ARGS"
    while true; do
      case "$1" in
        -h | --help)
          cli_delete_help_command
          exit 1
          shift
          ;;
        --api-host)
          API_HOST="$2"
          shift 2
          ;;
        --) shift;
          break
          ;;
      esac
    done
    delete "$@"
    ;;
  add)
    VALID_ARGS=$(getopt -o hdn:ar --long help,docker-client,docker-archive,name:,api-host:,replace -- "$@")
    if [[ $? -ne 0 ]]; then
      exit 1;
    fi
    eval set --"$VALID_ARGS"
    while true; do
      case "$1" in
        -h | --help)
          cli_add_help_command
          exit 1
          shift
          ;;
        --api-host)
          API_HOST="$2"
          shift 2
          ;;
        -d | --docker-client)
          DOCKER_CLIENT=true
          shift
          ;;
        -a | --docker-archive)
          DOCKER_ARCHIVE=true
          shift
          ;;
        -n | --name)
          NAME="$2"
          shift 2
          ;;
        -r | --replace)
          REPLACE=true
          shift
          ;;
        --) shift;
          break
          ;;
      esac
    done
    add "$@"
    ;;
  *)
    cli_help_command
    ;;
esac

cleanup
