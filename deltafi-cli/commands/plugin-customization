#!/usr/bin/env bash

. "$DELTAFICLI_WORKDIR/common"

cli_help_command() {
  echo "
Command: plugin-customization

Subcommands:
  save [FILE]
  remove [GROUP_ID:ARTIFACT_ID]
  list

Usage:
  plugin-customization [SUBCOMMAND] [OPTIONS]

Options:
  -h, --help     Show help"
  exit 1
}

TMPFILE="/tmp/.deltafi-plugin-customization.$$"

cleanup() {
  rm -f $TMPFILE
  exit
}

trap cleanup INT

ARGS=($@)
[[ " ${ARGS[@]} " =~ " --help " || " ${ARGS[@]} " =~ " -h " ]] && cli_help_command

SUBCOMMAND=${ARGS[1]}

ALL_FIELDS="groupId artifactId urlTemplate secretName"

VARIABLES="{}"
case "$SUBCOMMAND" in
  save)
    EXTRACT_PATH=".data.savePluginCustomizationConfig"
    QUERY="mutation(\$config: PluginCustomizationConfigInput!) { savePluginCustomizationConfig(pluginCustomizationConfigInput: \$config) {$ALL_FIELDS}}"

    FILE=${ARGS[2]}
    if [ ! -f "$FILE" ]; then
      cli_log "${red}${FILE}: No such file${normal}"
      exit 1
    fi

    JSON=$(cat "$FILE")
    VARIABLES="{\"config\": $JSON }"
    ;;
  remove)
    ID=${ARGS[2]}

    if [[ -z "$ID" ]]; then
      cli_log "${red}The groupId:artifactId must be provided${normal}"
      exit
    fi

    EXTRACT_PATH=".data.removePluginCustomizationConfig"
    QUERY="mutation { removePluginCustomizationConfig(id: \"$ID\") {success info errors}}"
    ;;
  list)
    EXTRACT_PATH=".data.getPluginCustomizationConfigs"
    QUERY="query { getPluginCustomizationConfigs { $ALL_FIELDS }}"
    ;;
  *)
    cli_help_command
    ;;
esac

DELTAFI_DGS=$(deltafi serviceip deltafi-core-service)
QUERY=$(echo $QUERY | sed 's/"/\\"/g')
POST_QUERY="{ \"query\": \"$QUERY\",\"variables\":$VARIABLES}"

truncate -s 0 ${TMPFILE}
RESPONSE_CODE=$(curl -s -X POST -o ${TMPFILE} -w "%{http_code}" -H "Content-Type: application/json" -H "$PERMISSION" -H "$CLI_USER" -d "$POST_QUERY" http://$DELTAFI_DGS/graphql)

if [[ "$RESPONSE_CODE" != "200" ]]; then
  cli_log "${red}Failed executing $SUBCOMMAND${normal}"
  echo -e "${red}${RESPONSE_CODE} Error: $(cat ${TMPFILE})${normal}"
  exit
fi

DGS_ERRORS=$(cat $TMPFILE | jq -r "select(.errors) | .errors[] | .message")
if [[ "$DGS_ERRORS" != "" ]]; then
  cli_log "${red}Failed to execute $SUBCOMMAND ${normal}"
  echo -e "${red}Error: ${DGS_ERRORS}${normal}"
else
  cat "$TMPFILE" | jq "$EXTRACT_PATH"
fi