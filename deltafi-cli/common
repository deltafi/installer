#!/usr/bin/env bash

export DELTAFICLI_PROJECT_NAME=deltafi
export DELTAFICLI_CHART_PATH=${DELTAFICLI_WORKDIR}/../charts/deltafi
export DELTAFICLI_COMPOSE_PATH=${DELTAFICLI_WORKDIR}/../compose
export DELTAFICLI_DISABLED_STATE_PATH=${DELTAFICLI_WORKDIR}/.disabled_state.json

KUBECTL_BIN="kubectl --namespace ${DELTAFICLI_K8S_NAMESPACE}"
CLI_USER="X-User-Name: deltafi-cli"
PERMISSION="X-User-Permissions: Admin"

normal=$(tput sgr0)
bold=$(tput bold)
red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
blue=$(tput setaf 33)
magenta=$(tput setaf 5)
cyan=$(tput setaf 6)
white=$(tput setaf 7)
black=$(tput setaf 0)
gray=$(tput setaf 8)
orange=$(tput setaf 208)

cli_log() {
  local timestamp
  timestamp=${gray}$(date -u +"%Y-%m-%dT%H:%M:%SZ")
  echo "${yellow}>  $timestamp${normal} $1"
}

_attention() {
  {
    printf "\n%s\n\n" "${yellow}>  ${green}${*}${normal}"
  } 1>&2
}

_warn() {
  {
    printf "%s\n" "${red}!  ${normal}${*}"
  }
}

_ok() {
  printf "   [ %s%-4s%s ]  %s\n" "${green}" " OK" "${normal}" "$@"
}

_down() {
  printf "   [ %s%-4s%s ]  %s\n" "${yellow}" "DOWN" "${normal}" "$@"
}

_fail() {
  printf "   [ %s%-4s%s ]  %s\n" "${red}" "FAIL" "${normal}" "$@"
}

_is_standalone() {
  if [ "${DELTAFI_MODE}" == "STANDALONE" ]; then
    return 0
  else
    return 1
  fi
}

_exit_1() {
  {
    printf "%s " "$(tput setaf 1)!$(tput sgr0)"
    "${@}"
  } 1>&2
  exit 1
}

_current_replica_counts() {
  deployments=$($KUBECTL_BIN get deployments --output=json | jq '[.items[] | {name: .metadata.name, count: .spec.replicas}]')
  statefulsets=$($KUBECTL_BIN get sts --output=json | jq '[.items[] | {name: .metadata.name, count: .spec.replicas}]')
  echo "{\"deployments\": ${deployments}", "\"statefulsets\": ${statefulsets}}"
}

_reset_replica_counts_from_file() {
  local state_file="$1"
  while IFS= read -r statefulset; do
      statefulset_name=$(echo "$statefulset" | jq -r '.name')
      replicas=$(echo "$statefulset" | jq -r '.count')
      $KUBECTL_BIN scale statefulsets/"$statefulset_name" --replicas="$replicas"
  done < <(jq -rc '.statefulsets[]' "$state_file")

  while IFS= read -r deployment; do
      deployment_name=$(echo "$deployment" | jq -r '.name')
      replicas=$(echo "$deployment" | jq -r '.count')
      $KUBECTL_BIN scale deployments/"$deployment_name" --replicas="$replicas"
  done < <(jq -rc '.deployments[]' "$state_file")

  rm "$state_file"
}

_tool_exists() {
    command -v "$1" &> /dev/null
}

_require_command() {
  command -v $1 &> /dev/null || _exit_1 echo "Command '$@' is not installed. DeltaFi CLI cannot execute."
}

_version_check() {
  local minimumVersion=$1
  local actualVersion=$2
  [[ "${minimumVersion}" = "$(echo -e "${minimumVersion}\n${actualVersion}" | sort -V | head -n1)" ]]
}

_pretty_json() {
  [[ "$QUIET" ]]  && return 0
  if _tool_exists python; then
    python -m json.tool
  elif _tool_exists python3; then
    python3 -m json.tool
  else
    cat
    echo
  fi
}

_are_you_sure() {
  local prompt=${1:-"Are you sure?"}
  read -r -p "         ${yellow}$prompt${normal} [y/N] " response
  case "$response" in
    [yY][eE][sS]|[yY])
      ;;
    *)
      exit 0
      ;;
  esac
}

